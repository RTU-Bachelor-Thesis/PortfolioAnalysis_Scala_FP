# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkApplyWeights
# Parameters: (assetsCount = 10)

# Run progress: 0,00% complete, ETA 00:28:00
# Fork: 1 of 1
# Warmup Iteration   1: 2029,599 ns/op
# Warmup Iteration   2: 1892,914 ns/op
Iteration   1: 1743,204 ns/op
Iteration   2: 1765,943 ns/op
Iteration   3: 1751,397 ns/op
Iteration   4: 1751,658 ns/op
Iteration   5: 1754,113 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkApplyWeights":
  1753,263 ±(99.9%) 31,563 ns/op [Average]
  (min, avg, max) = (1743,204, 1753,263, 1765,943), stdev = 8,197
  CI (99.9%): [1721,701, 1784,826] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkApplyWeights
# Parameters: (assetsCount = 100)

# Run progress: 4,17% complete, ETA 00:27:03
# Fork: 1 of 1
# Warmup Iteration   1: 18628,304 ns/op
# Warmup Iteration   2: 17340,331 ns/op
Iteration   1: 17322,350 ns/op
Iteration   2: 18974,052 ns/op
Iteration   3: 17445,187 ns/op
Iteration   4: 19146,474 ns/op
Iteration   5: 17472,953 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkApplyWeights":
  18072,203 ±(99.9%) 3487,926 ns/op [Average]
  (min, avg, max) = (17322,350, 18072,203, 19146,474), stdev = 905,803
  CI (99.9%): [14584,277, 21560,129] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkApplyWeights
# Parameters: (assetsCount = 1000)

# Run progress: 8,33% complete, ETA 00:25:52
# Fork: 1 of 1
# Warmup Iteration   1: 180831,723 ns/op
# Warmup Iteration   2: 175464,190 ns/op
Iteration   1: 176079,229 ns/op
Iteration   2: 175515,327 ns/op
Iteration   3: 175122,273 ns/op
Iteration   4: 175855,417 ns/op
Iteration   5: 175410,959 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkApplyWeights":
  175596,641 ±(99.9%) 1448,440 ns/op [Average]
  (min, avg, max) = (175122,273, 175596,641, 176079,229), stdev = 376,155
  CI (99.9%): [174148,201, 177045,080] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange
# Parameters: (assetsCount = 10)

# Run progress: 12,50% complete, ETA 00:24:41
# Fork: 1 of 1
# Warmup Iteration   1: 16803,348 ns/op
# Warmup Iteration   2: 16550,983 ns/op
Iteration   1: 16456,168 ns/op
Iteration   2: 16488,532 ns/op
Iteration   3: 16595,793 ns/op
Iteration   4: 16503,101 ns/op
Iteration   5: 16621,361 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange":
  16532,991 ±(99.9%) 275,833 ns/op [Average]
  (min, avg, max) = (16456,168, 16532,991, 16621,361), stdev = 71,633
  CI (99.9%): [16257,158, 16808,824] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange
# Parameters: (assetsCount = 100)

# Run progress: 16,67% complete, ETA 00:23:30
# Fork: 1 of 1
# Warmup Iteration   1: 168646,968 ns/op
# Warmup Iteration   2: 165206,930 ns/op
Iteration   1: 165070,384 ns/op
Iteration   2: 165511,257 ns/op
Iteration   3: 165175,379 ns/op
Iteration   4: 165587,309 ns/op
Iteration   5: 166454,875 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange":
  165559,841 ±(99.9%) 2101,672 ns/op [Average]
  (min, avg, max) = (165070,384, 165559,841, 166454,875), stdev = 545,798
  CI (99.9%): [163458,169, 167661,513] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange
# Parameters: (assetsCount = 1000)

# Run progress: 20,83% complete, ETA 00:22:19
# Fork: 1 of 1
# Warmup Iteration   1: 1665797,119 ns/op
# Warmup Iteration   2: 1629656,675 ns/op
Iteration   1: 1634586,843 ns/op
Iteration   2: 1629322,477 ns/op
Iteration   3: 1629601,416 ns/op
Iteration   4: 1643852,191 ns/op
Iteration   5: 1632006,925 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange":
  1633873,970 ±(99.9%) 22985,614 ns/op [Average]
  (min, avg, max) = (1629322,477, 1633873,970, 1643852,191), stdev = 5969,291
  CI (99.9%): [1610888,356, 1656859,585] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCombine
# Parameters: (assetsCount = 10)

# Run progress: 25,00% complete, ETA 00:21:09
# Fork: 1 of 1
# Warmup Iteration   1: 1895,391 ns/op
# Warmup Iteration   2: 1731,059 ns/op
Iteration   1: 1721,294 ns/op
Iteration   2: 1721,618 ns/op
Iteration   3: 1857,649 ns/op
Iteration   4: 1728,332 ns/op
Iteration   5: 1718,616 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCombine":
  1749,502 ±(99.9%) 233,203 ns/op [Average]
  (min, avg, max) = (1718,616, 1749,502, 1857,649), stdev = 60,562
  CI (99.9%): [1516,299, 1982,704] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCombine
# Parameters: (assetsCount = 100)

# Run progress: 29,17% complete, ETA 00:19:58
# Fork: 1 of 1
# Warmup Iteration   1: 17675,209 ns/op
# Warmup Iteration   2: 17189,049 ns/op
Iteration   1: 17092,262 ns/op
Iteration   2: 17247,750 ns/op
Iteration   3: 17169,878 ns/op
Iteration   4: 17111,545 ns/op
Iteration   5: 17131,112 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCombine":
  17150,509 ±(99.9%) 236,730 ns/op [Average]
  (min, avg, max) = (17092,262, 17150,509, 17247,750), stdev = 61,478
  CI (99.9%): [16913,780, 17387,239] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCombine
# Parameters: (assetsCount = 1000)

# Run progress: 33,33% complete, ETA 00:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 181362,260 ns/op
# Warmup Iteration   2: 179762,233 ns/op
Iteration   1: 176643,063 ns/op
Iteration   2: 175427,706 ns/op
Iteration   3: 179790,471 ns/op
Iteration   4: 176163,919 ns/op
Iteration   5: 175973,579 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCombine":
  176799,748 ±(99.9%) 6652,345 ns/op [Average]
  (min, avg, max) = (175427,706, 176799,748, 179790,471), stdev = 1727,593
  CI (99.9%): [170147,403, 183452,092] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFillRandom
# Parameters: (assetsCount = 10)

# Run progress: 37,50% complete, ETA 00:17:37
# Fork: 1 of 1
# Warmup Iteration   1: 2111,888 ns/op
# Warmup Iteration   2: 2105,124 ns/op
Iteration   1: 2100,713 ns/op
Iteration   2: 2107,867 ns/op
Iteration   3: 2115,048 ns/op
Iteration   4: 2111,456 ns/op
Iteration   5: 2113,157 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFillRandom":
  2109,648 ±(99.9%) 21,761 ns/op [Average]
  (min, avg, max) = (2100,713, 2109,648, 2115,048), stdev = 5,651
  CI (99.9%): [2087,888, 2131,409] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFillRandom
# Parameters: (assetsCount = 100)

# Run progress: 41,67% complete, ETA 00:16:27
# Fork: 1 of 1
# Warmup Iteration   1: 21026,375 ns/op
# Warmup Iteration   2: 20789,862 ns/op
Iteration   1: 20763,836 ns/op
Iteration   2: 20804,576 ns/op
Iteration   3: 21027,913 ns/op
Iteration   4: 20923,498 ns/op
Iteration   5: 20936,513 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFillRandom":
  20891,267 ±(99.9%) 410,740 ns/op [Average]
  (min, avg, max) = (20763,836, 20891,267, 21027,913), stdev = 106,668
  CI (99.9%): [20480,527, 21302,007] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFillRandom
# Parameters: (assetsCount = 1000)

# Run progress: 45,83% complete, ETA 00:15:16
# Fork: 1 of 1
# Warmup Iteration   1: 221994,722 ns/op
# Warmup Iteration   2: 213730,105 ns/op
Iteration   1: 212149,555 ns/op
Iteration   2: 211822,303 ns/op
Iteration   3: 212081,800 ns/op
Iteration   4: 211944,143 ns/op
Iteration   5: 212019,664 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFillRandom":
  212003,493 ±(99.9%) 487,376 ns/op [Average]
  (min, avg, max) = (211822,303, 212003,493, 212149,555), stdev = 126,570
  CI (99.9%): [211516,117, 212490,869] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange
# Parameters: (assetsCount = 10)

# Run progress: 50,00% complete, ETA 00:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 51,313 ns/op
# Warmup Iteration   2: 64,528 ns/op
Iteration   1: 54,383 ns/op
Iteration   2: 47,346 ns/op
Iteration   3: 62,090 ns/op
Iteration   4: 47,759 ns/op
Iteration   5: 48,123 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange":
  51,940 ±(99.9%) 24,516 ns/op [Average]
  (min, avg, max) = (47,346, 51,940, 62,090), stdev = 6,367
  CI (99.9%): [27,424, 76,456] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange
# Parameters: (assetsCount = 100)

# Run progress: 54,17% complete, ETA 00:12:55
# Fork: 1 of 1
# Warmup Iteration   1: 203,635 ns/op
# Warmup Iteration   2: 388,766 ns/op
Iteration   1: 336,299 ns/op
Iteration   2: 356,114 ns/op
Iteration   3: 328,566 ns/op
Iteration   4: 341,051 ns/op
Iteration   5: 359,689 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange":
  344,344 ±(99.9%) 50,885 ns/op [Average]
  (min, avg, max) = (328,566, 344,344, 359,689), stdev = 13,215
  CI (99.9%): [293,459, 395,228] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange
# Parameters: (assetsCount = 1000)

# Run progress: 58,33% complete, ETA 00:11:44
# Fork: 1 of 1
# Warmup Iteration   1: 5012,360 ns/op
# Warmup Iteration   2: 4996,613 ns/op
Iteration   1: 5037,136 ns/op
Iteration   2: 4985,673 ns/op
Iteration   3: 4892,143 ns/op
Iteration   4: 4942,707 ns/op
Iteration   5: 5168,954 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange":
  5005,322 ±(99.9%) 407,986 ns/op [Average]
  (min, avg, max) = (4892,143, 5005,322, 5168,954), stdev = 105,953
  CI (99.9%): [4597,336, 5413,309] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn
# Parameters: (assetsCount = 10)

# Run progress: 62,50% complete, ETA 00:10:34
# Fork: 1 of 1
# Warmup Iteration   1: 910,517 ns/op
# Warmup Iteration   2: 954,843 ns/op
Iteration   1: 934,676 ns/op
Iteration   2: 935,099 ns/op
Iteration   3: 931,469 ns/op
Iteration   4: 927,350 ns/op
Iteration   5: 920,742 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn":
  929,867 ±(99.9%) 22,996 ns/op [Average]
  (min, avg, max) = (920,742, 929,867, 935,099), stdev = 5,972
  CI (99.9%): [906,871, 952,863] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn
# Parameters: (assetsCount = 100)

# Run progress: 66,67% complete, ETA 00:09:23
# Fork: 1 of 1
# Warmup Iteration   1: 8959,549 ns/op
# Warmup Iteration   2: 9191,257 ns/op
Iteration   1: 9182,295 ns/op
Iteration   2: 9190,031 ns/op
Iteration   3: 9202,431 ns/op
Iteration   4: 9389,017 ns/op
Iteration   5: 9243,121 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn":
  9241,379 ±(99.9%) 330,373 ns/op [Average]
  (min, avg, max) = (9182,295, 9241,379, 9389,017), stdev = 85,797
  CI (99.9%): [8911,006, 9571,752] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn
# Parameters: (assetsCount = 1000)

# Run progress: 70,83% complete, ETA 00:08:13
# Fork: 1 of 1
# Warmup Iteration   1: 92211,821 ns/op
# Warmup Iteration   2: 95506,679 ns/op
Iteration   1: 95569,445 ns/op
Iteration   2: 95554,482 ns/op
Iteration   3: 95660,784 ns/op
Iteration   4: 95513,036 ns/op
Iteration   5: 95612,980 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn":
  95582,145 ±(99.9%) 218,144 ns/op [Average]
  (min, avg, max) = (95513,036, 95582,145, 95660,784), stdev = 56,651
  CI (99.9%): [95364,001, 95800,289] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkScale
# Parameters: (assetsCount = 10)

# Run progress: 75,00% complete, ETA 00:07:02
# Fork: 1 of 1
# Warmup Iteration   1: 228,817 ns/op
# Warmup Iteration   2: 547,640 ns/op
Iteration   1: 544,887 ns/op
Iteration   2: 553,291 ns/op
Iteration   3: 546,234 ns/op
Iteration   4: 551,337 ns/op
Iteration   5: 548,806 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkScale":
  548,911 ±(99.9%) 13,400 ns/op [Average]
  (min, avg, max) = (544,887, 548,911, 553,291), stdev = 3,480
  CI (99.9%): [535,511, 562,311] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkScale
# Parameters: (assetsCount = 100)

# Run progress: 79,17% complete, ETA 00:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 2089,169 ns/op
# Warmup Iteration   2: 5399,599 ns/op
Iteration   1: 5395,753 ns/op
Iteration   2: 5406,996 ns/op
Iteration   3: 5411,712 ns/op
Iteration   4: 5452,122 ns/op
Iteration   5: 5388,122 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkScale":
  5410,941 ±(99.9%) 95,559 ns/op [Average]
  (min, avg, max) = (5388,122, 5410,941, 5452,122), stdev = 24,816
  CI (99.9%): [5315,382, 5506,500] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkScale
# Parameters: (assetsCount = 1000)

# Run progress: 83,33% complete, ETA 00:04:41
# Fork: 1 of 1
# Warmup Iteration   1: 21191,706 ns/op
# Warmup Iteration   2: 54313,134 ns/op
Iteration   1: 55521,890 ns/op
Iteration   2: 54174,959 ns/op
Iteration   3: 54046,817 ns/op
Iteration   4: 54090,337 ns/op
Iteration   5: 54227,572 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkScale":
  54412,315 ±(99.9%) 2403,865 ns/op [Average]
  (min, avg, max) = (54046,817, 54412,315, 55521,890), stdev = 624,276
  CI (99.9%): [52008,451, 56816,180] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkTranspose
# Parameters: (assetsCount = 10)

# Run progress: 87,50% complete, ETA 00:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 193,581 ns/op
# Warmup Iteration   2: 190,406 ns/op
Iteration   1: 189,174 ns/op
Iteration   2: 190,259 ns/op
Iteration   3: 188,663 ns/op
Iteration   4: 188,648 ns/op
Iteration   5: 189,354 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkTranspose":
  189,220 ±(99.9%) 2,537 ns/op [Average]
  (min, avg, max) = (188,648, 189,220, 190,259), stdev = 0,659
  CI (99.9%): [186,683, 191,756] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkTranspose
# Parameters: (assetsCount = 100)

# Run progress: 91,67% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 1299,639 ns/op
# Warmup Iteration   2: 1269,580 ns/op
Iteration   1: 1277,555 ns/op
Iteration   2: 1300,661 ns/op
Iteration   3: 1280,577 ns/op
Iteration   4: 1283,502 ns/op
Iteration   5: 1275,411 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkTranspose":
  1283,541 ±(99.9%) 38,690 ns/op [Average]
  (min, avg, max) = (1275,411, 1283,541, 1300,661), stdev = 10,048
  CI (99.9%): [1244,852, 1322,231] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkTranspose
# Parameters: (assetsCount = 1000)

# Run progress: 95,83% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 37764,137 ns/op
# Warmup Iteration   2: 30506,909 ns/op
Iteration   1: 30186,813 ns/op
Iteration   2: 30886,928 ns/op
Iteration   3: 30841,878 ns/op
Iteration   4: 30949,531 ns/op
Iteration   5: 30856,680 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkTranspose":
  30744,366 ±(99.9%) 1210,667 ns/op [Average]
  (min, avg, max) = (30186,813, 30744,366, 30949,531), stdev = 314,406
  CI (99.9%): [29533,699, 31955,033] (assumes normal distribution)


# Run complete. Total time: 00:28:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                (assetsCount)  Mode  Cnt        Score       Error  Units
PortfolioBenchmark.benchmarkApplyWeights                            10  avgt    5     1753,263 ±    31,563  ns/op
PortfolioBenchmark.benchmarkApplyWeights                           100  avgt    5    18072,203 ±  3487,926  ns/op
PortfolioBenchmark.benchmarkApplyWeights                          1000  avgt    5   175596,641 ±  1448,440  ns/op
PortfolioBenchmark.benchmarkCalculateReturnsChange                  10  avgt    5    16532,991 ±   275,833  ns/op
PortfolioBenchmark.benchmarkCalculateReturnsChange                 100  avgt    5   165559,841 ±  2101,672  ns/op
PortfolioBenchmark.benchmarkCalculateReturnsChange                1000  avgt    5  1633873,970 ± 22985,614  ns/op
PortfolioBenchmark.benchmarkCombine                                 10  avgt    5     1749,502 ±   233,203  ns/op
PortfolioBenchmark.benchmarkCombine                                100  avgt    5    17150,509 ±   236,730  ns/op
PortfolioBenchmark.benchmarkCombine                               1000  avgt    5   176799,748 ±  6652,345  ns/op
PortfolioBenchmark.benchmarkFillRandom                              10  avgt    5     2109,648 ±    21,761  ns/op
PortfolioBenchmark.benchmarkFillRandom                             100  avgt    5    20891,267 ±   410,740  ns/op
PortfolioBenchmark.benchmarkFillRandom                            1000  avgt    5   212003,493 ±   487,376  ns/op
PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange             10  avgt    5       51,940 ±    24,516  ns/op
PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange            100  avgt    5      344,344 ±    50,885  ns/op
PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange           1000  avgt    5     5005,322 ±   407,986  ns/op
PortfolioBenchmark.benchmarkFindMaxTotalReturn                      10  avgt    5      929,867 ±    22,996  ns/op
PortfolioBenchmark.benchmarkFindMaxTotalReturn                     100  avgt    5     9241,379 ±   330,373  ns/op
PortfolioBenchmark.benchmarkFindMaxTotalReturn                    1000  avgt    5    95582,145 ±   218,144  ns/op
PortfolioBenchmark.benchmarkScale                                   10  avgt    5      548,911 ±    13,400  ns/op
PortfolioBenchmark.benchmarkScale                                  100  avgt    5     5410,941 ±    95,559  ns/op
PortfolioBenchmark.benchmarkScale                                 1000  avgt    5    54412,315 ±  2403,865  ns/op
PortfolioBenchmark.benchmarkTranspose                               10  avgt    5      189,220 ±     2,537  ns/op
PortfolioBenchmark.benchmarkTranspose                              100  avgt    5     1283,541 ±    38,690  ns/op
PortfolioBenchmark.benchmarkTranspose                             1000  avgt    5    30744,366 ±  1210,667  ns/op
