# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkApplyWeights
# Parameters: (assetsCount = 10)

# Run progress: 0,00% complete, ETA 00:28:00
# Fork: 1 of 1
# Warmup Iteration   1: 1998,617 ns/op
# Warmup Iteration   2: 2139,342 ns/op
Iteration   1: 2182,237 ns/op
Iteration   2: 1837,504 ns/op
Iteration   3: 1743,005 ns/op
Iteration   4: 1837,397 ns/op
Iteration   5: 1747,645 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkApplyWeights":
  1869,558 ±(99.9%) 696,073 ns/op [Average]
  (min, avg, max) = (1743,005, 1869,558, 2182,237), stdev = 180,768
  CI (99.9%): [1173,485, 2565,631] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkApplyWeights
# Parameters: (assetsCount = 100)

# Run progress: 4,17% complete, ETA 00:27:02
# Fork: 1 of 1
# Warmup Iteration   1: 17803,686 ns/op
# Warmup Iteration   2: 17394,335 ns/op
Iteration   1: 19670,240 ns/op
Iteration   2: 17857,775 ns/op
Iteration   3: 17601,424 ns/op
Iteration   4: 17075,001 ns/op
Iteration   5: 17036,341 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkApplyWeights":
  17848,156 ±(99.9%) 4146,274 ns/op [Average]
  (min, avg, max) = (17036,341, 17848,156, 19670,240), stdev = 1076,774
  CI (99.9%): [13701,882, 21994,430] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkApplyWeights
# Parameters: (assetsCount = 1000)

# Run progress: 8,33% complete, ETA 00:25:52
# Fork: 1 of 1
# Warmup Iteration   1: 184474,462 ns/op
# Warmup Iteration   2: 184448,203 ns/op
Iteration   1: 178209,608 ns/op
Iteration   2: 177500,044 ns/op
Iteration   3: 177652,154 ns/op
Iteration   4: 176577,536 ns/op
Iteration   5: 176811,120 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkApplyWeights":
  177350,092 ±(99.9%) 2539,550 ns/op [Average]
  (min, avg, max) = (176577,536, 177350,092, 178209,608), stdev = 659,513
  CI (99.9%): [174810,542, 179889,643] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange
# Parameters: (assetsCount = 10)

# Run progress: 12,50% complete, ETA 00:24:42
# Fork: 1 of 1
# Warmup Iteration   1: 17026,773 ns/op
# Warmup Iteration   2: 16652,236 ns/op
Iteration   1: 16665,768 ns/op
Iteration   2: 16647,921 ns/op
Iteration   3: 16669,768 ns/op
Iteration   4: 16651,447 ns/op
Iteration   5: 16776,077 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange":
  16682,196 ±(99.9%) 205,192 ns/op [Average]
  (min, avg, max) = (16647,921, 16682,196, 16776,077), stdev = 53,288
  CI (99.9%): [16477,005, 16887,388] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange
# Parameters: (assetsCount = 100)

# Run progress: 16,67% complete, ETA 00:23:31
# Fork: 1 of 1
# Warmup Iteration   1: 168917,902 ns/op
# Warmup Iteration   2: 165010,232 ns/op
Iteration   1: 164432,727 ns/op
Iteration   2: 164354,239 ns/op
Iteration   3: 164553,959 ns/op
Iteration   4: 164688,496 ns/op
Iteration   5: 165410,144 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange":
  164687,913 ±(99.9%) 1629,168 ns/op [Average]
  (min, avg, max) = (164354,239, 164687,913, 165410,144), stdev = 423,090
  CI (99.9%): [163058,745, 166317,081] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange
# Parameters: (assetsCount = 1000)

# Run progress: 20,83% complete, ETA 00:22:20
# Fork: 1 of 1
# Warmup Iteration   1: 1729233,633 ns/op
# Warmup Iteration   2: 1676351,966 ns/op
Iteration   1: 1673159,374 ns/op
Iteration   2: 1675288,867 ns/op
Iteration   3: 1676562,730 ns/op
Iteration   4: 1727608,280 ns/op
Iteration   5: 1675050,217 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCalculateReturnsChange":
  1685533,894 ±(99.9%) 90689,257 ns/op [Average]
  (min, avg, max) = (1673159,374, 1685533,894, 1727608,280), stdev = 23551,712
  CI (99.9%): [1594844,637, 1776223,150] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCombine
# Parameters: (assetsCount = 10)

# Run progress: 25,00% complete, ETA 00:21:09
# Fork: 1 of 1
# Warmup Iteration   1: 1769,702 ns/op
# Warmup Iteration   2: 1713,151 ns/op
Iteration   1: 1712,677 ns/op
Iteration   2: 1721,454 ns/op
Iteration   3: 1712,212 ns/op
Iteration   4: 1712,080 ns/op
Iteration   5: 1722,048 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCombine":
  1716,094 ±(99.9%) 19,919 ns/op [Average]
  (min, avg, max) = (1712,080, 1716,094, 1722,048), stdev = 5,173
  CI (99.9%): [1696,175, 1736,013] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCombine
# Parameters: (assetsCount = 100)

# Run progress: 29,17% complete, ETA 00:19:59
# Fork: 1 of 1
# Warmup Iteration   1: 17714,129 ns/op
# Warmup Iteration   2: 17175,478 ns/op
Iteration   1: 17359,864 ns/op
Iteration   2: 17228,043 ns/op
Iteration   3: 17262,201 ns/op
Iteration   4: 17211,806 ns/op
Iteration   5: 17172,160 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCombine":
  17246,815 ±(99.9%) 273,424 ns/op [Average]
  (min, avg, max) = (17172,160, 17246,815, 17359,864), stdev = 71,007
  CI (99.9%): [16973,391, 17520,240] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkCombine
# Parameters: (assetsCount = 1000)

# Run progress: 33,33% complete, ETA 00:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 179836,598 ns/op
# Warmup Iteration   2: 178034,467 ns/op
Iteration   1: 182597,243 ns/op
Iteration   2: 177739,533 ns/op
Iteration   3: 178645,171 ns/op
Iteration   4: 177090,734 ns/op
Iteration   5: 176616,621 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkCombine":
  178537,860 ±(99.9%) 9215,991 ns/op [Average]
  (min, avg, max) = (176616,621, 178537,860, 182597,243), stdev = 2393,364
  CI (99.9%): [169321,869, 187753,852] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFillRandom
# Parameters: (assetsCount = 10)

# Run progress: 37,50% complete, ETA 00:17:37
# Fork: 1 of 1
# Warmup Iteration   1: 2122,911 ns/op
# Warmup Iteration   2: 2108,830 ns/op
Iteration   1: 2100,845 ns/op
Iteration   2: 2103,330 ns/op
Iteration   3: 2112,035 ns/op
Iteration   4: 2106,758 ns/op
Iteration   5: 2110,316 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFillRandom":
  2106,657 ±(99.9%) 17,976 ns/op [Average]
  (min, avg, max) = (2100,845, 2106,657, 2112,035), stdev = 4,668
  CI (99.9%): [2088,681, 2124,632] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFillRandom
# Parameters: (assetsCount = 100)

# Run progress: 41,67% complete, ETA 00:16:27
# Fork: 1 of 1
# Warmup Iteration   1: 21080,455 ns/op
# Warmup Iteration   2: 20897,937 ns/op
Iteration   1: 20821,277 ns/op
Iteration   2: 20768,787 ns/op
Iteration   3: 20956,447 ns/op
Iteration   4: 20971,487 ns/op
Iteration   5: 21025,399 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFillRandom":
  20908,679 ±(99.9%) 417,661 ns/op [Average]
  (min, avg, max) = (20768,787, 20908,679, 21025,399), stdev = 108,465
  CI (99.9%): [20491,018, 21326,341] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFillRandom
# Parameters: (assetsCount = 1000)

# Run progress: 45,83% complete, ETA 00:15:16
# Fork: 1 of 1
# Warmup Iteration   1: 222720,898 ns/op
# Warmup Iteration   2: 215207,500 ns/op
Iteration   1: 213483,894 ns/op
Iteration   2: 213460,728 ns/op
Iteration   3: 213525,999 ns/op
Iteration   4: 214051,506 ns/op
Iteration   5: 213827,652 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFillRandom":
  213669,956 ±(99.9%) 999,625 ns/op [Average]
  (min, avg, max) = (213460,728, 213669,956, 214051,506), stdev = 259,600
  CI (99.9%): [212670,330, 214669,581] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange
# Parameters: (assetsCount = 10)

# Run progress: 50,00% complete, ETA 00:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 55,175 ns/op
# Warmup Iteration   2: 34,282 ns/op
Iteration   1: 51,306 ns/op
Iteration   2: 58,124 ns/op
Iteration   3: 64,073 ns/op
Iteration   4: 58,847 ns/op
Iteration   5: 36,336 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange":
  53,737 ±(99.9%) 41,334 ns/op [Average]
  (min, avg, max) = (36,336, 53,737, 64,073), stdev = 10,734
  CI (99.9%): [12,403, 95,071] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange
# Parameters: (assetsCount = 100)

# Run progress: 54,17% complete, ETA 00:12:55
# Fork: 1 of 1
# Warmup Iteration   1: 308,242 ns/op
# Warmup Iteration   2: 316,393 ns/op
Iteration   1: 265,216 ns/op
Iteration   2: 265,684 ns/op
Iteration   3: 314,485 ns/op
Iteration   4: 315,957 ns/op
Iteration   5: 335,026 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange":
  299,274 ±(99.9%) 122,922 ns/op [Average]
  (min, avg, max) = (265,216, 299,274, 335,026), stdev = 31,922
  CI (99.9%): [176,352, 422,195] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange
# Parameters: (assetsCount = 1000)

# Run progress: 58,33% complete, ETA 00:11:45
# Fork: 1 of 1
# Warmup Iteration   1: 5115,501 ns/op
# Warmup Iteration   2: 5022,516 ns/op
Iteration   1: 5062,239 ns/op
Iteration   2: 5165,490 ns/op
Iteration   3: 5072,071 ns/op
Iteration   4: 4999,138 ns/op
Iteration   5: 5129,910 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange":
  5085,769 ±(99.9%) 247,688 ns/op [Average]
  (min, avg, max) = (4999,138, 5085,769, 5165,490), stdev = 64,324
  CI (99.9%): [4838,082, 5333,457] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn
# Parameters: (assetsCount = 10)

# Run progress: 62,50% complete, ETA 00:10:34
# Fork: 1 of 1
# Warmup Iteration   1: 933,096 ns/op
# Warmup Iteration   2: 939,949 ns/op
Iteration   1: 931,340 ns/op
Iteration   2: 943,488 ns/op
Iteration   3: 932,974 ns/op
Iteration   4: 941,657 ns/op
Iteration   5: 945,289 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn":
  938,950 ±(99.9%) 24,485 ns/op [Average]
  (min, avg, max) = (931,340, 938,950, 945,289), stdev = 6,359
  CI (99.9%): [914,465, 963,434] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn
# Parameters: (assetsCount = 100)

# Run progress: 66,67% complete, ETA 00:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 9130,637 ns/op
# Warmup Iteration   2: 9383,448 ns/op
Iteration   1: 9437,511 ns/op
Iteration   2: 9399,894 ns/op
Iteration   3: 10048,695 ns/op
Iteration   4: 9442,787 ns/op
Iteration   5: 9330,742 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn":
  9531,926 ±(99.9%) 1125,643 ns/op [Average]
  (min, avg, max) = (9330,742, 9531,926, 10048,695), stdev = 292,326
  CI (99.9%): [8406,283, 10657,569] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn
# Parameters: (assetsCount = 1000)

# Run progress: 70,83% complete, ETA 00:08:13
# Fork: 1 of 1
# Warmup Iteration   1: 92046,888 ns/op
# Warmup Iteration   2: 97046,185 ns/op
Iteration   1: 95887,631 ns/op
Iteration   2: 96491,680 ns/op
Iteration   3: 95769,366 ns/op
Iteration   4: 96718,641 ns/op
Iteration   5: 95657,187 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkFindMaxTotalReturn":
  96104,901 ±(99.9%) 1812,783 ns/op [Average]
  (min, avg, max) = (95657,187, 96104,901, 96718,641), stdev = 470,774
  CI (99.9%): [94292,118, 97917,684] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkScale
# Parameters: (assetsCount = 10)

# Run progress: 75,00% complete, ETA 00:07:03
# Fork: 1 of 1
# Warmup Iteration   1: 229,595 ns/op
# Warmup Iteration   2: 546,194 ns/op
Iteration   1: 543,504 ns/op
Iteration   2: 544,032 ns/op
Iteration   3: 564,709 ns/op
Iteration   4: 543,907 ns/op
Iteration   5: 558,778 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkScale":
  550,986 ±(99.9%) 38,674 ns/op [Average]
  (min, avg, max) = (543,504, 550,986, 564,709), stdev = 10,043
  CI (99.9%): [512,312, 589,660] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkScale
# Parameters: (assetsCount = 100)

# Run progress: 79,17% complete, ETA 00:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 2163,110 ns/op
# Warmup Iteration   2: 5395,337 ns/op
Iteration   1: 5400,380 ns/op
Iteration   2: 5403,362 ns/op
Iteration   3: 5383,177 ns/op
Iteration   4: 5395,627 ns/op
Iteration   5: 5386,004 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkScale":
  5393,710 ±(99.9%) 33,990 ns/op [Average]
  (min, avg, max) = (5383,177, 5393,710, 5403,362), stdev = 8,827
  CI (99.9%): [5359,720, 5427,700] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkScale
# Parameters: (assetsCount = 1000)

# Run progress: 83,33% complete, ETA 00:04:42
# Fork: 1 of 1
# Warmup Iteration   1: 21287,854 ns/op
# Warmup Iteration   2: 54750,092 ns/op
Iteration   1: 56982,676 ns/op
Iteration   2: 53652,276 ns/op
Iteration   3: 53917,347 ns/op
Iteration   4: 53831,563 ns/op
Iteration   5: 53882,999 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkScale":
  54453,372 ±(99.9%) 5458,695 ns/op [Average]
  (min, avg, max) = (53652,276, 54453,372, 56982,676), stdev = 1417,606
  CI (99.9%): [48994,677, 59912,068] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkTranspose
# Parameters: (assetsCount = 10)

# Run progress: 87,50% complete, ETA 00:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 194,484 ns/op
# Warmup Iteration   2: 191,755 ns/op
Iteration   1: 188,902 ns/op
Iteration   2: 189,367 ns/op
Iteration   3: 189,036 ns/op
Iteration   4: 191,875 ns/op
Iteration   5: 190,085 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkTranspose":
  189,853 ±(99.9%) 4,696 ns/op [Average]
  (min, avg, max) = (188,902, 189,853, 191,875), stdev = 1,220
  CI (99.9%): [185,157, 194,549] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkTranspose
# Parameters: (assetsCount = 100)

# Run progress: 91,67% complete, ETA 00:02:21
# Fork: 1 of 1
# Warmup Iteration   1: 1295,476 ns/op
# Warmup Iteration   2: 1261,908 ns/op
Iteration   1: 1360,295 ns/op
Iteration   2: 1262,680 ns/op
Iteration   3: 1262,318 ns/op
Iteration   4: 1267,189 ns/op
Iteration   5: 1277,628 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkTranspose":
  1286,022 ±(99.9%) 161,639 ns/op [Average]
  (min, avg, max) = (1262,318, 1286,022, 1360,295), stdev = 41,977
  CI (99.9%): [1124,383, 1447,661] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmarkings.PortfolioBenchmark.benchmarkTranspose
# Parameters: (assetsCount = 1000)

# Run progress: 95,83% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 37866,503 ns/op
# Warmup Iteration   2: 30452,594 ns/op
Iteration   1: 30448,020 ns/op
Iteration   2: 31586,729 ns/op
Iteration   3: 30367,029 ns/op
Iteration   4: 31438,497 ns/op
Iteration   5: 30129,618 ns/op


Result "benchmarkings.PortfolioBenchmark.benchmarkTranspose":
  30793,979 ±(99.9%) 2573,894 ns/op [Average]
  (min, avg, max) = (30129,618, 30793,979, 31586,729), stdev = 668,432
  CI (99.9%): [28220,085, 33367,872] (assumes normal distribution)


# Run complete. Total time: 00:28:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                (assetsCount)  Mode  Cnt        Score       Error  Units
PortfolioBenchmark.benchmarkApplyWeights                            10  avgt    5     1869,558 ±   696,073  ns/op
PortfolioBenchmark.benchmarkApplyWeights                           100  avgt    5    17848,156 ±  4146,274  ns/op
PortfolioBenchmark.benchmarkApplyWeights                          1000  avgt    5   177350,092 ±  2539,550  ns/op
PortfolioBenchmark.benchmarkCalculateReturnsChange                  10  avgt    5    16682,196 ±   205,192  ns/op
PortfolioBenchmark.benchmarkCalculateReturnsChange                 100  avgt    5   164687,913 ±  1629,168  ns/op
PortfolioBenchmark.benchmarkCalculateReturnsChange                1000  avgt    5  1685533,894 ± 90689,257  ns/op
PortfolioBenchmark.benchmarkCombine                                 10  avgt    5     1716,094 ±    19,919  ns/op
PortfolioBenchmark.benchmarkCombine                                100  avgt    5    17246,815 ±   273,424  ns/op
PortfolioBenchmark.benchmarkCombine                               1000  avgt    5   178537,860 ±  9215,991  ns/op
PortfolioBenchmark.benchmarkFillRandom                              10  avgt    5     2106,657 ±    17,976  ns/op
PortfolioBenchmark.benchmarkFillRandom                             100  avgt    5    20908,679 ±   417,661  ns/op
PortfolioBenchmark.benchmarkFillRandom                            1000  avgt    5   213669,956 ±   999,625  ns/op
PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange             10  avgt    5       53,737 ±    41,334  ns/op
PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange            100  avgt    5      299,274 ±   122,922  ns/op
PortfolioBenchmark.benchmarkFindAssetsWithinReturnRange           1000  avgt    5     5085,769 ±   247,688  ns/op
PortfolioBenchmark.benchmarkFindMaxTotalReturn                      10  avgt    5      938,950 ±    24,485  ns/op
PortfolioBenchmark.benchmarkFindMaxTotalReturn                     100  avgt    5     9531,926 ±  1125,643  ns/op
PortfolioBenchmark.benchmarkFindMaxTotalReturn                    1000  avgt    5    96104,901 ±  1812,783  ns/op
PortfolioBenchmark.benchmarkScale                                   10  avgt    5      550,986 ±    38,674  ns/op
PortfolioBenchmark.benchmarkScale                                  100  avgt    5     5393,710 ±    33,990  ns/op
PortfolioBenchmark.benchmarkScale                                 1000  avgt    5    54453,372 ±  5458,695  ns/op
PortfolioBenchmark.benchmarkTranspose                               10  avgt    5      189,853 ±     4,696  ns/op
PortfolioBenchmark.benchmarkTranspose                              100  avgt    5     1286,022 ±   161,639  ns/op
PortfolioBenchmark.benchmarkTranspose                             1000  avgt    5    30793,979 ±  2573,894  ns/op
